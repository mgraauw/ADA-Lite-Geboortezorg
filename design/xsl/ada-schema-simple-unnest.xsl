<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="3.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:map="http://www.w3.org/2005/xpath-functions/map"
  xmlns:array="http://www.w3.org/2005/xpath-functions/array" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://purl.oclc.org/dsdl/schematron"
  xmlns:local="#local.mfj_4hd_wgb" xmlns:xslgen="#xslgen" xmlns:bc-alg="https://babyconnect.org/ns/ada-lite-geboortezorg"
  exclude-result-prefixes="#all" expand-text="true">
  <!-- ================================================================== -->
  <!-- 
       This script "unnests" the schema generated by ada-rtd2ada-schema-simple.xsl: It extracts all embedded complex
       types and makes them named complex types.
  -->
  <!-- 
    MIT License
  
    Copyright (c) 2019 Marc de Graauw and Erik Siegel
    
    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:
    
    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.
    
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.
  -->
  <!-- ================================================================== -->
  <!-- SETUP: -->

  <xsl:output method="xml" indent="yes" encoding="UTF-8"/>

  <xsl:mode on-no-match="shallow-copy"/>
  <xsl:mode name="mode-convert-element-declarations" on-no-match="shallow-copy"/>
  <xsl:mode name="mode-convert-complex-types-to-named" on-no-match="shallow-skip"/>

  <!-- ================================================================== -->
  <!-- PARAMETERS: -->



  <!-- ================================================================== -->
  <!-- GLOBAL DECLARATIONS: -->

  <xsl:variable name="all-element-names" as="xs:string+" select="//xs:element/@name/string()"/>
  
  <xsl:variable name="element-name-adaextension" as="xs:string" select="'adaextension'"/>
  <xsl:variable name="complex-type-prefix" as="xs:string" select="''"/>

  <!-- ================================================================== -->
  <!-- MAIN TEMPLATES: -->

  <xsl:template match="/xs:schema">
    <xsl:copy>
      <xsl:copy-of select="@*"/>

      <!-- We do the processing in two passes (because otherwise the named complex types would become nested): 
           1. Turn all the element with nested complex types into elements that reference a complex type (and copy everything else)
           2. Create all the named complex types
      -->
      <xsl:apply-templates mode="mode-convert-element-declarations"/>
      <xsl:apply-templates mode="mode-convert-complex-types-to-named"/>

      <!-- Add adaextension as complex type: -->
      <xs:complexType name="{$complex-type-prefix}{$element-name-adaextension}">
        <xs:sequence>
          <xs:any maxOccurs="unbounded" minOccurs="0" processContents="skip"/>
        </xs:sequence>
        <xs:anyAttribute namespace="##any" processContents="skip"/>
      </xs:complexType>

    </xsl:copy>
  </xsl:template>

  <!-- ================================================================== -->
  <!-- CONVERT THE ELEMENT DECLARATIONS WITH NESTED COMPLEX TYPES:  -->

  <xsl:template match="xs:element" mode="mode-convert-element-declarations">
    <xsl:copy>
      <xsl:copy-of select="@*"/>
      <!-- There will only be a name if the element has an anonymous complex type. If so, make the declaration reference the
        type by name: -->
      <xsl:if test="exists(xs:complexType)">
        <xsl:attribute name="type" select="local:get-complex-type-name(xs:complexType)"/>
      </xsl:if>
      <xsl:copy-of select="* except xs:complexType"/>
    </xsl:copy>
  </xsl:template>

  <!-- ================================================================== -->
  <!-- CONVERT NESTED COMPLEX TYPES TO NAMED ONES: -->

  <xsl:template match="xs:element[@name ne $element-name-adaextension]/xs:complexType" mode="mode-convert-complex-types-to-named">
    <!-- Convert this nested complex type into a named one. -->
    <!-- Remark: Since the complex type for an <adaextension> element occurs very often, we don't convert it but add it manually -->
    <xs:complexType name="{local:get-complex-type-name(.)}">
      <!-- Process all the elements with nested complex types into ones with named type references: -->
      <xsl:apply-templates mode="mode-convert-element-declarations"/>
    </xs:complexType>
    <xsl:apply-templates mode="#current"/>
  </xsl:template>


  <!-- ================================================================== -->
  <!-- SUPPORT: -->

  <xsl:function name="local:get-complex-type-name" as="xs:string?">
    <!-- Returns the system-wide unique name for a nested complex type.  -->
    <xsl:param name="nested-complex-type-elm" as="element(xs:complexType)"/>

    <xsl:variable name="element-name" as="xs:string" select="$nested-complex-type-elm/../@name"/>
    <xsl:variable name="base-type-name" as="xs:string" select="$complex-type-prefix || $element-name"/>

    <xsl:choose>
      <xsl:when test="$element-name eq $element-name-adaextension">
        <xsl:sequence select="$base-type-name"/>
      </xsl:when>
      <xsl:when test="local:name-occurs-more-than-once($element-name)">
        <!-- The name is not unique. Add  suffix based on the last field of the concept id. -->
        <xsl:variable name="concept-id" as="xs:string?" select="$nested-complex-type-elm/xs:attribute[@name eq 'conceptId']/@fixed"/>
        <xsl:variable name="name-suffix" as="xs:string">
          <xsl:choose>
            <xsl:when test="normalize-space($concept-id) eq ''">
              <xsl:sequence select="generate-id($nested-complex-type-elm)"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="tokenize($concept-id, '\.')[last()]"/>              
            </xsl:otherwise>  
          </xsl:choose>
        </xsl:variable>
        <xsl:sequence select="$base-type-name || '_' || $name-suffix"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:sequence select="$base-type-name"/>
      </xsl:otherwise>  
    </xsl:choose>
    
  </xsl:function>
  
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  
  <xsl:function name="local:name-occurs-more-than-once" as="xs:boolean">
    <xsl:param name="name" as="xs:string"/>
    <xsl:sequence select="count($all-element-names[. eq $name]) gt 1"/>
  </xsl:function>
  
</xsl:stylesheet>
